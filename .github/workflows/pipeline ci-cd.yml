name: CI/CD Pipeline

on:
  push:
    branches: [master, main]
  pull_request:

jobs:
  php-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: db_absensi_test
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, pdo, pdo_mysql, mysqli
          coverage: none

      - name: Install dependencies
        run: composer install --prefer-dist

      - name: Copy .env.testing to .env
        run: cp .env.testing .env

      - name: Wait for MySQL
        run: |
          for i in {1..10}; do
            if mysqladmin ping -h 127.0.0.1 -uroot -proot --silent; then
              echo "MySQL is up!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 3
          done

      - name: Run Migrations
        run: php spark migrate --all

      - name: Run Unit Tests
        run: composer run-script test

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: php-test
    env:
      AWS_REGION: ap-southeast-2
      ECR_REPOSITORY: fppsokelompok4
      IMAGE_NAME: my-app

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR login
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME .

      - name: Tag image for ECR
        run: |
          docker tag $IMAGE_NAME ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY

      - name: Push image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    env:
      AWS_REGION: ap-southeast-2
      ECR_REPOSITORY: fppsokelompok4
      IMAGE_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com/fppsokelompok4
      CONTAINER_NAME: my-app
      EC2_HOST: ${{ secrets.EC2_HOST }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add EC2 host to known_hosts
        run: |
          ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i "${{ env.EC2_HOST }}," -u ubuntu ansible/deploy-playbook.yml
